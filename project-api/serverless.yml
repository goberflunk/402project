# NOTE: update this with your service name
service: project-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables



provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  sampleEnvVar: ${env:SAMPLE_ENV_VAR}
  environment:
    documentTableName: documents

  iamRoleStatements:
    - Effect: Allow
      Action:
          - dynamodb:DescribeTable
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  deleteDocument:
    handler: deleteDocument.main
    events:
      - http:
          path: documents/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  updateDocument:
    handler: updateDocument.main
    events:
      - http:
          path: documents/{id}
          method: put
          cors: true
          authorizer: aws_iam
  getDocument:
    handler: getDocument.main
    events:
      - http:
          path: documents/{id}
          method: get
          cors: true
          authorizer: aws_iam
  createDocument:
    handler: createDocument.main
    events:
      - http:
          path: documents
          method: post
          cors: true
          authorizer: aws_iam
  listDocuments:
    handler: listDocuments.main
    events:
      - http:
          path: documents
          method: get
          cors: true
          authorizer: aws_iam

# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
